package gov.healthit.chpl.entity;


import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: test_task_result.
 * 
 *
 * @author autogenerated
 */

@Entity
@Table(name = "test_task_result", catalog = "openchpl", schema = "openchpl")
public class TestTaskResult implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -8005903858831080481L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private ExperienceType computerExperience;
	/** Field mapping. */
	private Date creationDate;
	/** Field mapping. */
	private Boolean deleted;
	/** Field mapping. */
	private Boolean deviation;
	/** Field mapping. */
	private Long duration;
	/** Field mapping. */
	private EducationType educationType;
	/** Field mapping. */
	private Long id;
	/** Field mapping. */
	private Date lastModifiedDate;
	/** Field mapping. */
	private Long lastModifiedUser;
	/** Field mapping. */
	private ExperienceType productExperience;
	/** Field mapping. */
	private Boolean success;
	/** Field mapping. */
	private Integer taskSatisfication;
	/** Field mapping. */
	private TestParticipant testPaticipant;
	/** Field mapping. */
	private TestTask testTask;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TestTaskResult() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TestTaskResult(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param creationDate Date object;
	 * @param deleted Boolean object;
	 * @param id Long object;
	 * @param lastModifiedDate Date object;
	 * @param lastModifiedUser Long object;
	 * @param testPaticipant TestParticipant object;
	 * @param testTask TestTask object;
	 */
	public TestTaskResult(Date creationDate, Boolean deleted, Long id, 					
			Date lastModifiedDate, Long lastModifiedUser, TestParticipant testPaticipant, 					
			TestTask testTask) {

		this.creationDate = creationDate;
		this.deleted = deleted;
		this.id = id;
		this.lastModifiedDate = lastModifiedDate;
		this.lastModifiedUser = lastModifiedUser;
		this.testPaticipant = testPaticipant;
		this.testTask = testTask;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TestTaskResult.class;
	}
 

	 /**
	 * Return the value associated with the column: computerExperience.
	 * @return A ExperienceType object (this.computerExperience)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "computer_experience_id", nullable = true )
	public ExperienceType getComputerExperience() {
		return this.computerExperience;
		
	}
	

  
	 /**  
	 * Set the value related to the column: computerExperience.
	 * @param computerExperience the computerExperience value you wish to set
	 */
	public void setComputerExperience(final ExperienceType computerExperience) {
		this.computerExperience = computerExperience;
	}

	 /**
	 * Return the value associated with the column: creationDate.
	 * @return A Date object (this.creationDate)
	 */
	@Basic( optional = false )
	@Column( name = "creation_date", nullable = false  )
	public Date getCreationDate() {
		return this.creationDate;
		
	}
	

  
	 /**  
	 * Set the value related to the column: creationDate.
	 * @param creationDate the creationDate value you wish to set
	 */
	public void setCreationDate(final Date creationDate) {
		this.creationDate = creationDate;
	}

	 /**
	 * Return the value associated with the column: deleted.
	 * @return A Boolean object (this.deleted)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Boolean isDeleted() {
		return this.deleted;
		
	}
	

  
	 /**  
	 * Set the value related to the column: deleted.
	 * @param deleted the deleted value you wish to set
	 */
	public void setDeleted(final Boolean deleted) {
		this.deleted = deleted;
	}

	 /**
	 * Return the value associated with the column: deviation.
	 * @return A Boolean object (this.deviation)
	 */
	public Boolean isDeviation() {
		return this.deviation;
		
	}
	

  
	 /**  
	 * Set the value related to the column: deviation.
	 * @param deviation the deviation value you wish to set
	 */
	public void setDeviation(final Boolean deviation) {
		this.deviation = deviation;
	}

	 /**
	 * Return the value associated with the column: duration.
	 * @return A Long object (this.duration)
	 */
	public Long getDuration() {
		return this.duration;
		
	}
	

  
	 /**  
	 * Set the value related to the column: duration.
	 * @param duration the duration value you wish to set
	 */
	public void setDuration(final Long duration) {
		this.duration = duration;
	}

	 /**
	 * Return the value associated with the column: educationType.
	 * @return A EducationType object (this.educationType)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "education_type_id", nullable = true )
	public EducationType getEducationType() {
		return this.educationType;
		
	}
	

  
	 /**  
	 * Set the value related to the column: educationType.
	 * @param educationType the educationType value you wish to set
	 */
	public void setEducationType(final EducationType educationType) {
		this.educationType = educationType;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "testTaskResultTest_task_result_idGenerator")
	@Basic( optional = false )
	@Column( name = "test_task_result_id", nullable = false  )
	@SequenceGenerator(name = "testTaskResultTest_task_result_idGenerator", sequenceName = "openchpl.openchpl.test_task_result_test_task_result_id_seq", schema = "openchpl", catalog = "openchpl")
	public Long getId() {
		return this.id;
		
	}
	

  
	 /**  
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	 /**
	 * Return the value associated with the column: lastModifiedDate.
	 * @return A Date object (this.lastModifiedDate)
	 */
	@Basic( optional = false )
	@Column( name = "last_modified_date", nullable = false  )
	public Date getLastModifiedDate() {
		return this.lastModifiedDate;
		
	}
	

  
	 /**  
	 * Set the value related to the column: lastModifiedDate.
	 * @param lastModifiedDate the lastModifiedDate value you wish to set
	 */
	public void setLastModifiedDate(final Date lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}

	 /**
	 * Return the value associated with the column: lastModifiedUser.
	 * @return A Long object (this.lastModifiedUser)
	 */
	@Basic( optional = false )
	@Column( name = "last_modified_user", nullable = false  )
	public Long getLastModifiedUser() {
		return this.lastModifiedUser;
		
	}
	

  
	 /**  
	 * Set the value related to the column: lastModifiedUser.
	 * @param lastModifiedUser the lastModifiedUser value you wish to set
	 */
	public void setLastModifiedUser(final Long lastModifiedUser) {
		this.lastModifiedUser = lastModifiedUser;
	}

	 /**
	 * Return the value associated with the column: productExperience.
	 * @return A ExperienceType object (this.productExperience)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "product_experience_id", nullable = true )
	public ExperienceType getProductExperience() {
		return this.productExperience;
		
	}
	

  
	 /**  
	 * Set the value related to the column: productExperience.
	 * @param productExperience the productExperience value you wish to set
	 */
	public void setProductExperience(final ExperienceType productExperience) {
		this.productExperience = productExperience;
	}

	 /**
	 * Return the value associated with the column: success.
	 * @return A Boolean object (this.success)
	 */
	public Boolean isSuccess() {
		return this.success;
		
	}
	

  
	 /**  
	 * Set the value related to the column: success.
	 * @param success the success value you wish to set
	 */
	public void setSuccess(final Boolean success) {
		this.success = success;
	}

	 /**
	 * Return the value associated with the column: taskSatisfication.
	 * @return A Integer object (this.taskSatisfication)
	 */
	@Basic( optional = true )
	@Column( name = "task_satisfication"  )
	public Integer getTaskSatisfication() {
		return this.taskSatisfication;
		
	}
	

  
	 /**  
	 * Set the value related to the column: taskSatisfication.
	 * @param taskSatisfication the taskSatisfication value you wish to set
	 */
	public void setTaskSatisfication(final Integer taskSatisfication) {
		this.taskSatisfication = taskSatisfication;
	}

	 /**
	 * Return the value associated with the column: testPaticipant.
	 * @return A TestParticipant object (this.testPaticipant)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "test_paticipant_id", nullable = false )
	public TestParticipant getTestPaticipant() {
		return this.testPaticipant;
		
	}
	

  
	 /**  
	 * Set the value related to the column: testPaticipant.
	 * @param testPaticipant the testPaticipant value you wish to set
	 */
	public void setTestPaticipant(final TestParticipant testPaticipant) {
		this.testPaticipant = testPaticipant;
	}

	 /**
	 * Return the value associated with the column: testTask.
	 * @return A TestTask object (this.testTask)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "test_task_id", nullable = false )
	public TestTask getTestTask() {
		return this.testTask;
		
	}
	

  
	 /**  
	 * Set the value related to the column: testTask.
	 * @param testTask the testTask value you wish to set
	 */
	public void setTestTask(final TestTask testTask) {
		this.testTask = testTask;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TestTaskResult clone() throws CloneNotSupportedException {
		
        final TestTaskResult copy = (TestTaskResult)super.clone();

		copy.setComputerExperience(this.getComputerExperience());
		copy.setCreationDate(this.getCreationDate());
		copy.setDeleted(this.isDeleted());
		copy.setDeviation(this.isDeviation());
		copy.setDuration(this.getDuration());
		copy.setEducationType(this.getEducationType());
		copy.setId(this.getId());
		copy.setLastModifiedDate(this.getLastModifiedDate());
		copy.setLastModifiedUser(this.getLastModifiedUser());
		copy.setProductExperience(this.getProductExperience());
		copy.setSuccess(this.isSuccess());
		copy.setTaskSatisfication(this.getTaskSatisfication());
		copy.setTestPaticipant(this.getTestPaticipant());
		copy.setTestTask(this.getTestTask());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("creationDate: " + this.getCreationDate() + ", ");
		sb.append("deleted: " + this.isDeleted() + ", ");
		sb.append("deviation: " + this.isDeviation() + ", ");
		sb.append("duration: " + this.getDuration() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("lastModifiedDate: " + this.getLastModifiedDate() + ", ");
		sb.append("lastModifiedUser: " + this.getLastModifiedUser() + ", ");
		sb.append("success: " + this.isSuccess() + ", ");
		sb.append("taskSatisfication: " + this.getTaskSatisfication() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TestTaskResult that; 
		try {
			that = (TestTaskResult) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getComputerExperience() == null) && (that.getComputerExperience() == null)) || (getComputerExperience() != null && getComputerExperience().getId().equals(that.getComputerExperience().getId())));	
		result = result && (((getCreationDate() == null) && (that.getCreationDate() == null)) || (getCreationDate() != null && getCreationDate().equals(that.getCreationDate())));
		result = result && (((isDeleted() == null) && (that.isDeleted() == null)) || (isDeleted() != null && isDeleted().equals(that.isDeleted())));
		result = result && (((isDeviation() == null) && (that.isDeviation() == null)) || (isDeviation() != null && isDeviation().equals(that.isDeviation())));
		result = result && (((getDuration() == null) && (that.getDuration() == null)) || (getDuration() != null && getDuration().equals(that.getDuration())));
		result = result && (((getEducationType() == null) && (that.getEducationType() == null)) || (getEducationType() != null && getEducationType().getId().equals(that.getEducationType().getId())));	
		result = result && (((getLastModifiedDate() == null) && (that.getLastModifiedDate() == null)) || (getLastModifiedDate() != null && getLastModifiedDate().equals(that.getLastModifiedDate())));
		result = result && (((getLastModifiedUser() == null) && (that.getLastModifiedUser() == null)) || (getLastModifiedUser() != null && getLastModifiedUser().equals(that.getLastModifiedUser())));
		result = result && (((getProductExperience() == null) && (that.getProductExperience() == null)) || (getProductExperience() != null && getProductExperience().getId().equals(that.getProductExperience().getId())));	
		result = result && (((isSuccess() == null) && (that.isSuccess() == null)) || (isSuccess() != null && isSuccess().equals(that.isSuccess())));
		result = result && (((getTaskSatisfication() == null) && (that.getTaskSatisfication() == null)) || (getTaskSatisfication() != null && getTaskSatisfication().equals(that.getTaskSatisfication())));
		result = result && (((getTestPaticipant() == null) && (that.getTestPaticipant() == null)) || (getTestPaticipant() != null && getTestPaticipant().getId().equals(that.getTestPaticipant().getId())));	
		result = result && (((getTestTask() == null) && (that.getTestTask() == null)) || (getTestTask() != null && getTestTask().getId().equals(that.getTestTask().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Long newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}
	

	
}
