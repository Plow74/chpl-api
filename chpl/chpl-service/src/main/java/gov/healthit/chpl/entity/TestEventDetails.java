package gov.healthit.chpl.entity;

import gov.healthit.chpl.entity.TestParticipant;
import gov.healthit.chpl.entity.TestTask;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: test_event_details.
 * 
 *
 * @author autogenerated
 */

@Entity
@Table(name = "test_event_details", catalog = "openchpl", schema = "openchpl")
public class TestEventDetails implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -8041665117550213283L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private String areasForImprovement;
	/** Field mapping. */
	private CertificationEvent certificationEvent;
	/** Field mapping. */
	private Date creationDate;
	/** Field mapping. */
	private Boolean deleted;
	/** Field mapping. */
	private String effectiveness;
	/** Field mapping. */
	private String efficiency;
	/** Field mapping. */
	private Long id;
	/** Field mapping. */
	private String intendedUserDescription;
	/** Field mapping. */
	private Date lastModifiedDate;
	/** Field mapping. */
	private Long lastModifiedUser;
	/** Field mapping. */
	private String majorTestFinding;
	/** Field mapping. */
	private String satisfaction;
	/** Field mapping. */
	private Set<TestParticipant> testParticipants = new HashSet<TestParticipant>();

	/** Field mapping. */
	private Set<TestTask> testTasks = new HashSet<TestTask>();

	/** Field mapping. */
	private String testEnvironment;
	/** Field mapping. */
	private String userTaskDescription;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TestEventDetails() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TestEventDetails(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param certificationEvent CertificationEventEntity object;
	 * @param creationDate Date object;
	 * @param deleted Boolean object;
	 * @param id Long object;
	 * @param lastModifiedDate Date object;
	 * @param lastModifiedUser Long object;
	 */
	public TestEventDetails(CertificationEvent certificationEvent, Date creationDate, Boolean deleted, 					
			Long id, Date lastModifiedDate, Long lastModifiedUser) {

		this.certificationEvent = certificationEvent;
		this.creationDate = creationDate;
		this.deleted = deleted;
		this.id = id;
		this.lastModifiedDate = lastModifiedDate;
		this.lastModifiedUser = lastModifiedUser;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TestEventDetails.class;
	}
 

	 /**
	 * Return the value associated with the column: areasForImprovement.
	 * @return A String object (this.areasForImprovement)
	 */
	@Basic( optional = true )
	@Column( name = "areas_for_improvement", length = 2147483647  )
	public String getAreasForImprovement() {
		return this.areasForImprovement;
		
	}
	

  
	 /**  
	 * Set the value related to the column: areasForImprovement.
	 * @param areasForImprovement the areasForImprovement value you wish to set
	 */
	public void setAreasForImprovement(final String areasForImprovement) {
		this.areasForImprovement = areasForImprovement;
	}

	 /**
	 * Return the value associated with the column: certificationEvent.
	 * @return A CertificationEvent object (this.certificationEvent)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "certification_event_id", nullable = false )
	public CertificationEvent getCertificationEvent() {
		return this.certificationEvent;
		
	}
	

  
	 /**  
	 * Set the value related to the column: certificationEvent.
	 * @param certificationEvent the certificationEvent value you wish to set
	 */
	public void setCertificationEvent(final CertificationEvent certificationEvent) {
		this.certificationEvent = certificationEvent;
	}

	 /**
	 * Return the value associated with the column: creationDate.
	 * @return A Date object (this.creationDate)
	 */
	@Basic( optional = false )
	@Column( name = "creation_date", nullable = false  )
	public Date getCreationDate() {
		return this.creationDate;
		
	}
	

  
	 /**  
	 * Set the value related to the column: creationDate.
	 * @param creationDate the creationDate value you wish to set
	 */
	public void setCreationDate(final Date creationDate) {
		this.creationDate = creationDate;
	}

	 /**
	 * Return the value associated with the column: deleted.
	 * @return A Boolean object (this.deleted)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Boolean isDeleted() {
		return this.deleted;
		
	}
	

  
	 /**  
	 * Set the value related to the column: deleted.
	 * @param deleted the deleted value you wish to set
	 */
	public void setDeleted(final Boolean deleted) {
		this.deleted = deleted;
	}

	 /**
	 * Return the value associated with the column: effectiveness.
	 * @return A String object (this.effectiveness)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getEffectiveness() {
		return this.effectiveness;
		
	}
	

  
	 /**  
	 * Set the value related to the column: effectiveness.
	 * @param effectiveness the effectiveness value you wish to set
	 */
	public void setEffectiveness(final String effectiveness) {
		this.effectiveness = effectiveness;
	}

	 /**
	 * Return the value associated with the column: efficiency.
	 * @return A String object (this.efficiency)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getEfficiency() {
		return this.efficiency;
		
	}
	

  
	 /**  
	 * Set the value related to the column: efficiency.
	 * @param efficiency the efficiency value you wish to set
	 */
	public void setEfficiency(final String efficiency) {
		this.efficiency = efficiency;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "testEventDetailsTest_event_details_idGenerator")
	@Basic( optional = false )
	@Column( name = "test_event_details_id", nullable = false  )
	@SequenceGenerator(name = "testEventDetailsTest_event_details_idGenerator", sequenceName = "openchpl.openchpl.test_event_details_test_event_details_id_seq", schema = "openchpl", catalog = "openchpl")
	public Long getId() {
		return this.id;
		
	}
	

  
	 /**  
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	 /**
	 * Return the value associated with the column: intendedUserDescription.
	 * @return A String object (this.intendedUserDescription)
	 */
	@Basic( optional = true )
	@Column( name = "intended_user_description", length = 1000  )
	public String getIntendedUserDescription() {
		return this.intendedUserDescription;
		
	}
	

  
	 /**  
	 * Set the value related to the column: intendedUserDescription.
	 * @param intendedUserDescription the intendedUserDescription value you wish to set
	 */
	public void setIntendedUserDescription(final String intendedUserDescription) {
		this.intendedUserDescription = intendedUserDescription;
	}

	 /**
	 * Return the value associated with the column: lastModifiedDate.
	 * @return A Date object (this.lastModifiedDate)
	 */
	@Basic( optional = false )
	@Column( name = "last_modified_date", nullable = false  )
	public Date getLastModifiedDate() {
		return this.lastModifiedDate;
		
	}
	

  
	 /**  
	 * Set the value related to the column: lastModifiedDate.
	 * @param lastModifiedDate the lastModifiedDate value you wish to set
	 */
	public void setLastModifiedDate(final Date lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}

	 /**
	 * Return the value associated with the column: lastModifiedUser.
	 * @return A Long object (this.lastModifiedUser)
	 */
	@Basic( optional = false )
	@Column( name = "last_modified_user", nullable = false  )
	public Long getLastModifiedUser() {
		return this.lastModifiedUser;
		
	}
	

  
	 /**  
	 * Set the value related to the column: lastModifiedUser.
	 * @param lastModifiedUser the lastModifiedUser value you wish to set
	 */
	public void setLastModifiedUser(final Long lastModifiedUser) {
		this.lastModifiedUser = lastModifiedUser;
	}

	 /**
	 * Return the value associated with the column: majorTestFinding.
	 * @return A String object (this.majorTestFinding)
	 */
	@Basic( optional = true )
	@Column( name = "major_test_finding", length = 2147483647  )
	public String getMajorTestFinding() {
		return this.majorTestFinding;
		
	}
	

  
	 /**  
	 * Set the value related to the column: majorTestFinding.
	 * @param majorTestFinding the majorTestFinding value you wish to set
	 */
	public void setMajorTestFinding(final String majorTestFinding) {
		this.majorTestFinding = majorTestFinding;
	}

	 /**
	 * Return the value associated with the column: satisfaction.
	 * @return A String object (this.satisfaction)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getSatisfaction() {
		return this.satisfaction;
		
	}
	

  
	 /**  
	 * Set the value related to the column: satisfaction.
	 * @param satisfaction the satisfaction value you wish to set
	 */
	public void setSatisfaction(final String satisfaction) {
		this.satisfaction = satisfaction;
	}

	 /**
	 * Return the value associated with the column: testParticipant.
	 * @return A Set&lt;TestParticipant&gt; object (this.testParticipant)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "testEventDetails"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "test_event_details_id", nullable = false  )
	public Set<TestParticipant> getTestParticipants() {
		return this.testParticipants;
		
	}
	
	/**
	 * Adds a bi-directional link of type TestParticipant to the testParticipants set.
	 * @param testParticipant item to add
	 */
	public void addTestParticipant(TestParticipant testParticipant) {
		testParticipant.setTestEventDetails(this);
		this.testParticipants.add(testParticipant);
	}

  
	 /**  
	 * Set the value related to the column: testParticipant.
	 * @param testParticipant the testParticipant value you wish to set
	 */
	public void setTestParticipants(final Set<TestParticipant> testParticipant) {
		this.testParticipants = testParticipant;
	}

	 /**
	 * Return the value associated with the column: testTask.
	 * @return A Set&lt;TestTask&gt; object (this.testTask)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "testEventDetails"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "test_event_details_id", nullable = false  )
	public Set<TestTask> getTestTasks() {
		return this.testTasks;
		
	}
	
	/**
	 * Adds a bi-directional link of type TestTask to the testTasks set.
	 * @param testTask item to add
	 */
	public void addTestTask(TestTask testTask) {
		testTask.setTestEventDetails(this);
		this.testTasks.add(testTask);
	}

  
	 /**  
	 * Set the value related to the column: testTask.
	 * @param testTask the testTask value you wish to set
	 */
	public void setTestTasks(final Set<TestTask> testTask) {
		this.testTasks = testTask;
	}

	 /**
	 * Return the value associated with the column: testEnvironment.
	 * @return A String object (this.testEnvironment)
	 */
	@Basic( optional = true )
	@Column( name = "test_environment", length = 250  )
	public String getTestEnvironment() {
		return this.testEnvironment;
		
	}
	

  
	 /**  
	 * Set the value related to the column: testEnvironment.
	 * @param testEnvironment the testEnvironment value you wish to set
	 */
	public void setTestEnvironment(final String testEnvironment) {
		this.testEnvironment = testEnvironment;
	}

	 /**
	 * Return the value associated with the column: userTaskDescription.
	 * @return A String object (this.userTaskDescription)
	 */
	@Basic( optional = true )
	@Column( name = "user_task_description", length = 2147483647  )
	public String getUserTaskDescription() {
		return this.userTaskDescription;
		
	}
	

  
	 /**  
	 * Set the value related to the column: userTaskDescription.
	 * @param userTaskDescription the userTaskDescription value you wish to set
	 */
	public void setUserTaskDescription(final String userTaskDescription) {
		this.userTaskDescription = userTaskDescription;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TestEventDetails clone() throws CloneNotSupportedException {
		
        final TestEventDetails copy = (TestEventDetails)super.clone();

		copy.setAreasForImprovement(this.getAreasForImprovement());
		copy.setCertificationEvent(this.getCertificationEvent());
		copy.setCreationDate(this.getCreationDate());
		copy.setDeleted(this.isDeleted());
		copy.setEffectiveness(this.getEffectiveness());
		copy.setEfficiency(this.getEfficiency());
		copy.setId(this.getId());
		copy.setIntendedUserDescription(this.getIntendedUserDescription());
		copy.setLastModifiedDate(this.getLastModifiedDate());
		copy.setLastModifiedUser(this.getLastModifiedUser());
		copy.setMajorTestFinding(this.getMajorTestFinding());
		copy.setSatisfaction(this.getSatisfaction());
		if (this.getTestParticipants() != null) {
			copy.getTestParticipants().addAll(this.getTestParticipants());
		}
		if (this.getTestTasks() != null) {
			copy.getTestTasks().addAll(this.getTestTasks());
		}
		copy.setTestEnvironment(this.getTestEnvironment());
		copy.setUserTaskDescription(this.getUserTaskDescription());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("areasForImprovement: " + this.getAreasForImprovement() + ", ");
		sb.append("creationDate: " + this.getCreationDate() + ", ");
		sb.append("deleted: " + this.isDeleted() + ", ");
		sb.append("effectiveness: " + this.getEffectiveness() + ", ");
		sb.append("efficiency: " + this.getEfficiency() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("intendedUserDescription: " + this.getIntendedUserDescription() + ", ");
		sb.append("lastModifiedDate: " + this.getLastModifiedDate() + ", ");
		sb.append("lastModifiedUser: " + this.getLastModifiedUser() + ", ");
		sb.append("majorTestFinding: " + this.getMajorTestFinding() + ", ");
		sb.append("satisfaction: " + this.getSatisfaction() + ", ");
		sb.append("testEnvironment: " + this.getTestEnvironment() + ", ");
		sb.append("userTaskDescription: " + this.getUserTaskDescription());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TestEventDetails that; 
		try {
			that = (TestEventDetails) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAreasForImprovement() == null) && (that.getAreasForImprovement() == null)) || (getAreasForImprovement() != null && getAreasForImprovement().equals(that.getAreasForImprovement())));
		result = result && (((getCertificationEvent() == null) && (that.getCertificationEvent() == null)) || (getCertificationEvent() != null && getCertificationEvent().getId().equals(that.getCertificationEvent().getId())));	
		result = result && (((getCreationDate() == null) && (that.getCreationDate() == null)) || (getCreationDate() != null && getCreationDate().equals(that.getCreationDate())));
		result = result && (((isDeleted() == null) && (that.isDeleted() == null)) || (isDeleted() != null && isDeleted().equals(that.isDeleted())));
		result = result && (((getEffectiveness() == null) && (that.getEffectiveness() == null)) || (getEffectiveness() != null && getEffectiveness().equals(that.getEffectiveness())));
		result = result && (((getEfficiency() == null) && (that.getEfficiency() == null)) || (getEfficiency() != null && getEfficiency().equals(that.getEfficiency())));
		result = result && (((getIntendedUserDescription() == null) && (that.getIntendedUserDescription() == null)) || (getIntendedUserDescription() != null && getIntendedUserDescription().equals(that.getIntendedUserDescription())));
		result = result && (((getLastModifiedDate() == null) && (that.getLastModifiedDate() == null)) || (getLastModifiedDate() != null && getLastModifiedDate().equals(that.getLastModifiedDate())));
		result = result && (((getLastModifiedUser() == null) && (that.getLastModifiedUser() == null)) || (getLastModifiedUser() != null && getLastModifiedUser().equals(that.getLastModifiedUser())));
		result = result && (((getMajorTestFinding() == null) && (that.getMajorTestFinding() == null)) || (getMajorTestFinding() != null && getMajorTestFinding().equals(that.getMajorTestFinding())));
		result = result && (((getSatisfaction() == null) && (that.getSatisfaction() == null)) || (getSatisfaction() != null && getSatisfaction().equals(that.getSatisfaction())));
		result = result && (((getTestEnvironment() == null) && (that.getTestEnvironment() == null)) || (getTestEnvironment() != null && getTestEnvironment().equals(that.getTestEnvironment())));
		result = result && (((getUserTaskDescription() == null) && (that.getUserTaskDescription() == null)) || (getUserTaskDescription() != null && getUserTaskDescription().equals(that.getUserTaskDescription())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Long newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}
	

	
}
