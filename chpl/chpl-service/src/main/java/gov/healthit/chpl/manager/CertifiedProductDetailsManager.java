package gov.healthit.chpl.manager;

import java.util.List;

import gov.healthit.chpl.domain.CQMResultDetails;
import gov.healthit.chpl.domain.CertificationResult;
import gov.healthit.chpl.domain.CertificationStatusEvent;
import gov.healthit.chpl.domain.CertifiedProductSearchDetails;
import gov.healthit.chpl.exception.EntityRetrievalException;

/**
 * The CertifiedProductDetailsManager class is used to retrieve data related to the certified products.
 * @author TYoung
 *
 */
public interface CertifiedProductDetailsManager {

    /**
     * Retrieves certified product information based on the certified product id.  Retrieves children data
     * object asynchronously based on the environment variable asyncListingDetailsEnabled.
     * @param certifiedProductId certified product id from the database
     * @return CertifiedProductSearchDetails
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetails(Long certifiedProductId)
            throws EntityRetrievalException;

    /**
     * Retrieves certified product information based on the certified product id.
     * @param certifiedProductId certified product id from the database
     * @param retrieveAsynchronously determines if this the child data objects should be retrieved asynchronously
     * @return CertifiedProductSearchDetails
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetails(Long certifiedProductId,
            Boolean retrieveAsynchronously) throws EntityRetrievalException;

    /**
     * Retrieves certified product information based on the CHPL Product Number.
     * @param chplProductNumber CHPL Product Number generated by the system
     * @param retrieveAsynchronously determines if this the child data objects should be retrieved asynchronously
     * @return CertifiedProductSearchDetails
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetailsByChplProductNumber(String chplProductNumber,
            Boolean retrieveAsynchronously) throws EntityRetrievalException;

    /**
     * Retrieves certified product information based on the CHPL Product Number.  Retrieves children data
     * object asynchronously based on the environment variable asyncListingDetailsEnabled.
     * @param chplProductNumber CHPL Product Number generated by the system
     * @return CertifiedProductSearchDetails
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetailsByChplProductNumber(String chplProductNumber)
            throws EntityRetrievalException;

    /**
     * Retrieves basic certified product information based on the certified product id.  Basic information does not
     * include CQM Results and Certification Results.  Retrieves children data objects asynchronously based on the
     * environment variable asyncListingDetailsEnabled.
     * @param certifiedProductId certified product id from the database
     * @return CertifiedProductSearchDetails
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetailsBasic(Long certifiedProductId)
            throws EntityRetrievalException;

    /**
     * Retrieves basic certified product information based on the certified product id.  Basic information does not
     * include CQM Results and Certification Results.
     * @param certifiedProductId certified product id from the database
     * @param retrieveAsynchronously determines if this the child data objects should be retrieved asynchronously
     * @return CertifiedProductSearchDetails
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetailsBasic(Long certifiedProductId,
            Boolean retrieveAsynchronously) throws EntityRetrievalException;

    /**
     * Retrieves basic certified product information based on the CHPL Product Number.  Basic information does not
     * include CQM Results and Certification Results.  Retrieves children data objects asynchronously based on the
     * environment variable asyncListingDetailsEnabled.
     * @param chplProductNumber CHPL Product Number generated by the system
     * @return CertifiedProductSearchDetails
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetailsBasicByChplProductNumber(String chplProductNumber)
            throws EntityRetrievalException;

    /**
     * Retrieves basic certified product information based on the CHPL Product Number.  Basic information does not
     * include CQM Results and Certification Results.
     * @param chplProductNumber CHPL Product Number generated by the system
     * @param retrieveAsynchronously determines if this the child data objects should be retrieved asynchronously
     * @return CertifiedProductSearchDetails when the certified product cannot be found
     * @throws EntityRetrievalException  when the certified product cannot be found
     */
    CertifiedProductSearchDetails getCertifiedProductDetailsBasicByChplProductNumber(String chplProductNumber,
            Boolean retrieveAsynchronously) throws EntityRetrievalException;

    /**
     * Retrieves a list of CQM Results based on the certified product id.
     * @param certifiedProductId certified product id from the database
     * @return List<CQMResultDetails>
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    List<CQMResultDetails> getCertifiedProductCqms(Long certifiedProductId)
            throws EntityRetrievalException;

    /**
     * Retrieves a list of CQM Results based on the CHPL Product Number.
     * @param chplProductNumber CHPL Product Number generated by the system
     * @return List<CQMResultDetails>
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    List<CQMResultDetails> getCertifiedProductCqms(String chplProductNumber)
            throws EntityRetrievalException;

    /**
     * Retrieves a list of Certification Results based on the certified product id.
     * @param certifiedProductId certified product id from the database
     * @return List<CertificationResult>
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    List<CertificationResult> getCertifiedProductCertificationResults(Long certifiedProductId)
            throws EntityRetrievalException;

    /**
     * Retrieves a list of Certification Results based on the CHPL Product Number.
     * @param chplProductNumber CHPL Product Number generated by the system
     * @return List<CertificationResult>
     * @throws EntityRetrievalException when the certified product cannot be found
     */
    List<CertificationResult> getCertifiedProductCertificationResults(String chplProductNumber)
            throws EntityRetrievalException;

    /**
     * Retrieves the certification status event history for the given listing based on CHPL ID.
     * @param certifiedProductId
     * @return
     * @throws EntityRetrievalException
     */
    List<CertificationStatusEvent> getCertificationStatusEvents(Long certifiedProductId)
            throws EntityRetrievalException;
}
