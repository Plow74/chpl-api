package gov.healthit.chpl.entity;



import java.io.Serializable;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Embeddable;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;


/** 
 * Object mapping for hibernate-handled table: acb_contact_map.
 * 
 *
 * @author autogenerated
 */

@Embeddable
public class AcbContactMapPK implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = 5796524973580749967L;

	

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "certification_body_id_certification_body", nullable = false , insertable = false, updatable = false )
	private CertificationBody certificationBodyIdCertificationBody;

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "contact_id", nullable = false , insertable = false, updatable = false )
	private Contact contact;

 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return AcbContactMapPK.class;
	}
 

	 /**
	 * Return the value associated with the column: certificationBodyIdCertificationBody.
	 * @return A CertificationBody object (this.certificationBodyIdCertificationBody)
	 */
	public CertificationBody getCertificationBodyIdCertificationBody() {
		return this.certificationBodyIdCertificationBody;
		
	}
	

  
	 /**  
	 * Set the value related to the column: certificationBodyIdCertificationBody.
	 * @param certificationBodyIdCertificationBody the certificationBodyIdCertificationBody value you wish to set
	 */
	public void setCertificationBodyIdCertificationBody(final CertificationBody certificationBodyIdCertificationBody) {
		this.certificationBodyIdCertificationBody = certificationBodyIdCertificationBody;
	}

	 /**
	 * Return the value associated with the column: contact.
	 * @return A Contact object (this.contact)
	 */
	public Contact getContact() {
		return this.contact;
		
	}
	

  
	 /**  
	 * Set the value related to the column: contact.
	 * @param contact the contact value you wish to set
	 */
	public void setContact(final Contact contact) {
		this.contact = contact;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public AcbContactMapPK clone() throws CloneNotSupportedException {
		
        final AcbContactMapPK copy = (AcbContactMapPK)super.clone();

		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		if (aThat == null)  {
			 return false;
		}
		
		final AcbContactMapPK that; 
		try {
			that = (AcbContactMapPK) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((getCertificationBodyIdCertificationBody() == null) && (that.getCertificationBodyIdCertificationBody() == null)) || (getCertificationBodyIdCertificationBody() != null && getCertificationBodyIdCertificationBody().getId().equals(that.getCertificationBodyIdCertificationBody().getId())));	
		result = result && (((getContact() == null) && (that.getContact() == null)) || (getContact() != null && getContact().getId().equals(that.getContact().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
	int hash = 0;
		hash = hash + getCertificationBodyIdCertificationBody().hashCode();
		hash = hash + getContact().hashCode();
	return hash;
	}
	

	
}
